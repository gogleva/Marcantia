abline(h = -log10(pval), col = "#4DAF4A", lty = 3, lwd = 3)
abline(v = c(-lfc, lfc), col = "#377EB8", lty = 3, lwd = 3)
}
DEG_1d <- get_DEG(day = 1)
DEG_2d <- get_DEG(day = 2)
DEG_3d <- get_DEG(day = 3)
DEG_4d <- get_DEG(day = 4)
par(mfrow = c(4,1))
plot_volcano(get_DEG(day = 1, res = TRUE))
plot_volcano(get_DEG(day = 2, res = TRUE))
plot_volcano(get_DEG(day = 3, res = TRUE))
plot_volcano(get_DEG(day = 4, res = TRUE))
mycounts <- read_csv("data/FeatureCounts_STAR_Nbenthamiana.csv")
cleancounts <- select(mycounts, -c(X2:X6))
names(cleancounts) <- c('rowids',
'A72A', 'A72B', 'A72C',
'A14A', 'A14B', 'A14C',
'A24A', 'A24B', 'A24C',
'A48A', 'A48B', 'A48C',
'M72A', 'M72B', 'M72C',
'M14A', 'M14B', 'M14C',
'M24A', 'M24B', 'M24C',
'M48A', 'M48B', 'M48C')
fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C)
row.names(fc_table) <- fc_table$rowids
fc_table <- select(fc_table, -rowids)
sample_table <- read.csv("data/sample_table_Nbenthamiana.csv",
header = T,
row.names = 1)
names(sample_table)[1] <- "Experiment"
coldata <- sample_table
coldata$Experiment <- factor(coldata$Experiment, levels = c('mock', 'infected'))
get_DEG <- function(pw_counts = fc_table,
pw_coldata = coldata,
hour,
pv = 0.001,
lfc = 2,
res = FALSE){
# produce DEG analysis for a given time point, output a df with significant results (padj and log2FC)
# quick check: day should be numeric
if (!(is.numeric(hour))) stop('hour must be numeric!')
# subset relevant counts and metadata rows
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(hour, 'h'),]
pw_counts <- select(pw_counts,
contains(as.character(hour)))
# DEG analysis:
pw_dds <- DESeqDataSetFromMatrix(countData = pw_counts,
colData = pw_coldata,
design = ~ Experiment)
pw_dds <- pw_dds[rowSums(counts(pw_dds)) > 10, ]
pw_dds <- DESeq(pw_dds)
pw_res <- results(pw_dds, alpha = 0.001)
if (res == TRUE) {
return(pw_res) # convenient for volcanoplots
} else {
pw_res_ordered <- pw_res[order(pw_res$padj),]
# Export significant results: |LFC| >= 2 and adjusted p-value <= 10^-3
pw_resSig <- as.data.frame(subset(pw_res_ordered, padj < pv & abs(log2FoldChange) >= lfc))
return(pw_resSig)
}
}
plot_volcano <- function(res_object,
lfc = 2,
pval = 0.001){
tab <- data.frame(logFC = res_object$log2FoldChange,
negLogPval = -log10(res_object$padj))
signGenes <- (abs(tab$logFC) > lfc & tab$negLogPval > -log10(pval))
# plot
par(mar = c(2, 2, 1, 1))
plot(tab, pch = 16, cex = 0.6,
xlim = c(-15,15),
xlab = '',
ylab = '',
cex.axis = 1.0)
points(tab[signGenes, ], pch = 19, cex = 0.8, col = "#E41A1C")
abline(h = -log10(pval), col = "#4DAF4A", lty = 3, lwd = 3)
abline(v = c(-lfc, lfc), col = "#377EB8", lty = 3, lwd = 3)
}
DEG_14h <- get_DEG(hour = 14)
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1) %>%
mutate(day = 1) %>%
select(gene_id, day, everything())
mp_fc_table <- read.table("data/FeartureCounts_STAR_Mpolymorpha.tsv")
#----fix column names
names(mp_fc_table) <- c("gene_id", 'chr', 'start', 'stop',
'strand', 'length',
'A1A', 'A1B', 'A1C',
'A2A', 'A2B', 'A2C',
'A3A', 'A3B', 'A3C',
'A4A', 'A4B', 'A4C',
'M1A', 'M1B', 'M1C',
'M2A', 'M2B', 'M2C',
'M3A', 'M3B', 'M3C',
'M4A', 'M4B', 'M4C')
#----format count matrix
mp_fc_matrix <- mp_fc_table[,c(1,7:30)]
rownames(mp_fc_matrix) <- mp_fc_matrix[,1]
mp_fc_matrix <- mp_fc_matrix[,-c(1)]
#---- prep metadata
mp_sample_table <- read.csv("data/sample_table_Mpolymorpha.csv",
header = T,
row.names = 1)
names(mp_sample_table)[1] <- "Experiment"
mp_coldata <- mp_sample_table
mp_coldata$Experiment <- factor(mp_coldata$Experiment, levels = c('mock', 'infected'))
# Nicotiana benthamiana + P.palmivora (ARI-tdTomato) ----
# load raw counts
nb_counts <- read_csv("data/FeatureCounts_STAR_Nbenthamiana.csv")
#remove columns that we dont need anymore
cleancounts <- select(nb_counts, -c(X2:X6))
# rename columns
names(cleancounts) <- c('rowids',
'A72A', 'A72B', 'A72C',
'A14A', 'A14B', 'A14C',
'A24A', 'A24B', 'A24C',
'A48A', 'A48B', 'A48C',
'M72A', 'M72B', 'M72C',
'M14A', 'M14B', 'M14C',
'M24A', 'M24B', 'M24C',
'M48A', 'M48B', 'M48C')
# re-order columns (grouped from 14-72hpi in ARI vs MOCK treatments)
nb_fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C)
#These two steps will make sure that the rownames are now the rowids/benthi loci, then delete the redundant rowids columns
row.names(nb_fc_table) <- nb_fc_table$rowids
nb_fc_matrix <- select(nb_fc_table, -rowids)
#---- prep metadata
nb_sample_table <- read.csv("data/sample_table_Nbenthamiana.csv",
header = T,
row.names = 1)
names(nb_sample_table)[1] <- "Experiment"
nb_coldata <- nb_sample_table
#put the variable of interest at the end of the formula, the control level is the first level.
nb_coldata$Experiment <- factor(nb_coldata$Experiment, levels = c('mock', 'infected'))
#---- 2. DEG analysis: pair-wise comparisons between infected-mock for each plant and time point.
# we want to keep LFC values in 4 stages of infection, filter by adjsted p-value. Will use LFC later to compare expression patterns of orthologues genes.
### DEGs for orthologs:
# (wee need LFC in 4 time points, with filtering by p-value, w/o filtering by LFC)
get_DEG_LFC <- function(pw_counts,
pw_coldata,
species = c('Mpolymorpha', 'Nbenthamina'),
day_time,
pv = 0.001
){
# produce DEG analysis for a given time point, output a df with significant results (padj and log2FC)
# quick check: day_time should be numeric
if (!(is.numeric(day_time))) stop('day_time must be numeric!')
# subset relevant counts and metadata rows
if (species == 'Mpolymorpha'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'd'),]
}
if (species == 'Nbenthamiana'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'h'),]
}
pw_counts <- select(pw_counts,
contains(as.character(day_time)))
# DEG analysis:
pw_dds <- DESeqDataSetFromMatrix(countData = pw_counts,
colData = pw_coldata,
design = ~ Experiment)
pw_dds <- pw_dds[rowSums(counts(pw_dds)) > 10, ]
pw_dds <- DESeq(pw_dds)
pw_res <- results(pw_dds, alpha = 0.001)
pw_res_ordered <- pw_res[order(pw_res$padj),]
# Filter genes by adjusted p-value <= 10^-3
pw_resSig <- as.data.frame(subset(pw_res_ordered, padj < pv))
pw_resSig$gene_id <- rownames(pw_resSig)
return(pw_resSig)
}
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1) %>%
mutate(day = 1) %>%
select(gene_id, day, everything())
mp_deg1
get_DEG_LFC <- function(pw_counts,
pw_coldata,
species = c('Mpolymorpha', 'Nbenthamina'),
day_time,
pv = 0.001
){
# produce DEG analysis for a given time point, output a df with significant results (padj and log2FC)
# quick check: day_time should be numeric
if (!(is.numeric(day_time))) stop('day_time must be numeric!')
# subset relevant counts and metadata rows
if (species == 'Mpolymorpha'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'd'),]
}
if (species == 'Nbenthamiana'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'h'),]
}
pw_counts <- select(pw_counts,
contains(as.character(day_time)))
# DEG analysis:
pw_dds <- DESeqDataSetFromMatrix(countData = pw_counts,
colData = pw_coldata,
design = ~ Experiment)
pw_dds <- pw_dds[rowSums(counts(pw_dds)) > 10, ]
pw_dds <- DESeq(pw_dds)
pw_res <- results(pw_dds, alpha = 0.001)
pw_res_ordered <- pw_res[order(pw_res$padj),]
# Filter genes by adjusted p-value <= 10^-3
pw_resSig <- as.data.frame(subset(pw_res_ordered, padj < pv))
pw_resSig$gene_id <- rownames(pw_resSig)
pw_resSig <- pw_resSig %>%
mutate(day_time = 1) %>%
select(gene_id, day, everything())
return(pw_resSig)
}
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1)
get_DEG_LFC <- function(pw_counts,
pw_coldata,
species = c('Mpolymorpha', 'Nbenthamina'),
day_time,
pv = 0.001
){
# produce DEG analysis for a given time point, output a df with significant results (padj and log2FC)
# quick check: day_time should be numeric
if (!(is.numeric(day_time))) stop('day_time must be numeric!')
# subset relevant counts and metadata rows
if (species == 'Mpolymorpha'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'd'),]
}
if (species == 'Nbenthamiana'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'h'),]
}
pw_counts <- select(pw_counts,
contains(as.character(day_time)))
# DEG analysis:
pw_dds <- DESeqDataSetFromMatrix(countData = pw_counts,
colData = pw_coldata,
design = ~ Experiment)
pw_dds <- pw_dds[rowSums(counts(pw_dds)) > 10, ]
pw_dds <- DESeq(pw_dds)
pw_res <- results(pw_dds, alpha = 0.001)
pw_res_ordered <- pw_res[order(pw_res$padj),]
# Filter genes by adjusted p-value <= 10^-3
pw_resSig <- as.data.frame(subset(pw_res_ordered, padj < pv))
pw_resSig$gene_id <- rownames(pw_resSig)
pw_resSig <- pw_resSig %>%
mutate(day_time = 1) %>%
select(gene_id, day_time, everything())
return(pw_resSig)
}
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1)
View(mp_deg1)
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1)
mp_deg2 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 2)
mp_deg3 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 3)
mp_deg4 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 4)
mp_deg_all <- rbind(mp_deg1, mp_deg2,
mp_deg3, mp_deg4) %>%
mutate(species = 'Mpoly')
View(mp_deg_all)
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 14)
nb_deg24 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 24)
nb_deg48 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 48)
nb_deg72 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 72)
nb_deg_all <- rbind(nb_deg1, nb_deg2,
nb_deg3, nb_deg4) %>%
mutate(species = 'Niben')
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 1)
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 1)
#---- 1. Load raw counts and sample metadata for M.polymorpha - ARI-tdTomato and N.benthamiana - ARI-tdTomato timecourses. ----
# Marchantia polymorpha + P.palmivora (ARI-tdTomato) ----
#----download feature counts table
mp_fc_table <- read.table("data/FeartureCounts_STAR_Mpolymorpha.tsv")
#----fix column names
names(mp_fc_table) <- c("gene_id", 'chr', 'start', 'stop',
'strand', 'length',
'A1A', 'A1B', 'A1C',
'A2A', 'A2B', 'A2C',
'A3A', 'A3B', 'A3C',
'A4A', 'A4B', 'A4C',
'M1A', 'M1B', 'M1C',
'M2A', 'M2B', 'M2C',
'M3A', 'M3B', 'M3C',
'M4A', 'M4B', 'M4C')
#----format count matrix
mp_fc_matrix <- mp_fc_table[,c(1,7:30)]
rownames(mp_fc_matrix) <- mp_fc_matrix[,1]
mp_fc_matrix <- mp_fc_matrix[,-c(1)]
#---- prep metadata
mp_sample_table <- read.csv("data/sample_table_Mpolymorpha.csv",
header = T,
row.names = 1)
names(mp_sample_table)[1] <- "Experiment"
mp_coldata <- mp_sample_table
mp_coldata$Experiment <- factor(mp_coldata$Experiment, levels = c('mock', 'infected'))
# Nicotiana benthamiana + P.palmivora (ARI-tdTomato) ----
# load raw counts
nb_counts <- read_csv("data/FeatureCounts_STAR_Nbenthamiana.csv")
#remove columns that we dont need anymore
cleancounts <- select(nb_counts, -c(X2:X6))
# rename columns
names(cleancounts) <- c('rowids',
'A72A', 'A72B', 'A72C',
'A14A', 'A14B', 'A14C',
'A24A', 'A24B', 'A24C',
'A48A', 'A48B', 'A48C',
'M72A', 'M72B', 'M72C',
'M14A', 'M14B', 'M14C',
'M24A', 'M24B', 'M24C',
'M48A', 'M48B', 'M48C')
# re-order columns (grouped from 14-72hpi in ARI vs MOCK treatments)
nb_fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C)
#These two steps will make sure that the rownames are now the rowids/benthi loci, then delete the redundant rowids columns
row.names(nb_fc_table) <- nb_fc_table$rowids
nb_fc_matrix <- select(nb_fc_table, -rowids)
#---- prep metadata
nb_sample_table <- read.csv("data/sample_table_Nbenthamiana.csv",
header = T,
row.names = 1)
names(nb_sample_table)[1] <- "Experiment"
nb_coldata <- nb_sample_table
#put the variable of interest at the end of the formula, the control level is the first level.
nb_coldata$Experiment <- factor(nb_coldata$Experiment, levels = c('mock', 'infected'))
#---- 2. DEG analysis: pair-wise comparisons between infected-mock for each plant and time point.
# we want to keep LFC values in 4 stages of infection, filter by adjsted p-value. Will use LFC later to compare expression patterns of orthologues genes.
### DEGs for orthologs:
# (wee need LFC in 4 time points, with filtering by p-value, w/o filtering by LFC)
get_DEG_LFC <- function(pw_counts,
pw_coldata,
species = c('Mpolymorpha', 'Nbenthamina'),
day_time,
pv = 0.001
){
# produce DEG analysis for a given time point, output a df with significant results (padj and log2FC)
# quick check: day_time should be numeric
if (!(is.numeric(day_time))) stop('day_time must be numeric!')
# subset relevant counts and metadata rows
if (species == 'Mpolymorpha'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'd'),]
}
if (species == 'Nbenthamiana'){
pw_coldata <- pw_coldata[pw_coldata$Time == paste0(day_time, 'h'),]
}
pw_counts <- select(pw_counts,
contains(as.character(day_time)))
# DEG analysis:
pw_dds <- DESeqDataSetFromMatrix(countData = pw_counts,
colData = pw_coldata,
design = ~ Experiment)
pw_dds <- pw_dds[rowSums(counts(pw_dds)) > 10, ]
pw_dds <- DESeq(pw_dds)
pw_res <- results(pw_dds, alpha = 0.001)
pw_res_ordered <- pw_res[order(pw_res$padj),]
# Filter genes by adjusted p-value <= 10^-3
pw_resSig <- as.data.frame(subset(pw_res_ordered, padj < pv))
pw_resSig$gene_id <- rownames(pw_resSig)
pw_resSig <- pw_resSig %>%
mutate(day_time = 1) %>%
select(gene_id, day_time, everything())
return(pw_resSig)
}
# MP LFC ----
mp_deg1 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 1)
mp_deg2 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 2)
mp_deg3 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 3)
mp_deg4 <- get_DEG_LFC(pw_counts = mp_fc_matrix,
pw_coldata = mp_sample_table,
species = 'Mpolymorpha',
day_time = 4)
# combine in one object
mp_deg_all <- rbind(mp_deg1, mp_deg2,
mp_deg3, mp_deg4) %>%
mutate(species = 'Mpoly')
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_table,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 1)
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 1)
nb_fc_matrix
nb_counts <- read_csv("data/FeatureCounts_STAR_Nbenthamiana.csv")
cleancounts <- select(nb_counts, -c(X2:X6))
names(cleancounts) <- c('rowids',
'A72A', 'A72B', 'A72C',
'A14A', 'A14B', 'A14C',
'A24A', 'A24B', 'A24C',
'A48A', 'A48B', 'A48C',
'M72A', 'M72B', 'M72C',
'M14A', 'M14B', 'M14C',
'M24A', 'M24B', 'M24C',
'M48A', 'M48B', 'M48C')
nb_fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C)
row.names(nb_fc_table) <- nb_fc_table$rowids
nb_fc_matrix <- select(nb_fc_table, -rowids)
nb_fc_matrix
nb_fc_table
rownames(nb_fc_table) <- nb_fc_table$rowids
nb_fc_table
row.names(nb_fc_table) <- nb_fc_table$rowids
nb_fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C) %>%
as.table()
nb_fc_table <- select(cleancounts,
rowids,
A14A:A48C,
A72A:A72C,
M14A:M48C,
M72A:M72C) %>%
as.data.frame()
row.names(nb_fc_table) <- nb_fc_table$rowids
nb_fc_table
names(nb_fc_table)
nb_fc_matrix <- select(nb_fc_table, -rowids)
nb_fc_matrix
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 1)
nb_deg14 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 14)
nb_deg14
View(nb_deg14)
nb_deg24 <- get_DEG_LFC(pw_counts = nb_fc_,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 24)
nb_deg24 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 24)
nb_deg48 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 48)
nb_deg72 <- get_DEG_LFC(pw_counts = nb_fc_matrix,
pw_coldata = nb_sample_table,
species = 'Nbenthamiana',
day_time = 72)
nb_deg_all <- rbind(nb_deg14, nb_deg24,
nb_deg48, nb_deg72) %>%
mutate(species = 'Niben')
View(nb_deg_all)
